/**
* compress-base64 v4.0.1 by sunsilent
* @license MIT
**/
var CompressBase64 = (function (exports) {
    'use strict';

    var step = 0.001;
    function compress(base64, options) {
        var _a = options.type, type = _a === void 0 ? 'image/jpeg' : _a, width = options.width, height = options.height, min = options.min, max = options.max, crossOrigin = options.crossOrigin, quality = options.quality;
        return new Promise(function (resolve, reject) {
            var tq = quality || 0.8;
            var img = new Image();
            img.src = base64;
            if (typeof crossOrigin === 'string') {
                img.setAttribute('crossOrigin', crossOrigin);
            }
            var tw = parseFloat(width);
            var th = parseFloat(height);
            img.onload = function () {
                if (isNaN(tw) && isNaN(th)) {
                    tw = img.width;
                    th = img.height;
                }
                else {
                    if (!isNaN(tw) && isNaN(th)) {
                        th = (tw * img.height) / img.width;
                    }
                    if (isNaN(tw) && !isNaN(th)) {
                        tw = (th * img.width) / img.height;
                    }
                }
                img.width = tw;
                img.height = th;
                var canvas = document.createElement('canvas');
                var ctx = canvas.getContext('2d');
                canvas.width = tw;
                canvas.height = th;
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
                var base64 = canvas.toDataURL(type, tq);
                while (base64.length / 1024 > max) {
                    if (tq <= step) {
                        base64 = canvas.toDataURL(type, step);
                        break;
                    }
                    tq -= step;
                    base64 = canvas.toDataURL(type, tq);
                }
                while (base64.length / 1024 < min) {
                    tq += step;
                    base64 = canvas.toDataURL(type, tq);
                }
                resolve(base64);
            };
            img.onerror = function (error) {
                reject(error);
            };
        });
    }

    exports.default = compress;

    Object.defineProperty(exports, '__esModule', { value: true });

    return exports;

})({});
